>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

matrix_divided is a function that divides all elements of a matrix.
-> Prototype: def matrix_divided(matrix, div):
-> matrix must be a list of lists of integers or floats
-> Each row of the matrix must be of the same size
-> div must be a number (integer or float)
-> div canâ€™t be equal to 0
-> all elements of the matrix should be divided by div, rounded to 2 decimal places
-> returns a new matrix
---
in this text file you will find a break down of all the possible cases
---
#case.1 all the conditions are respected
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

---
#case.2 what if we divide by other type than int/float
>>> print(matrix_divided(matrix, "Hi")) 
Traceback (most recent call last):
    ...
TypeError: div must be a number

>>> print(matrix_divided(matrix, (1, 6, 7)))
Traceback (most recent call last):
    ...
TypeError: div must be a number

---
#case.3 what if the matrix contains ohter types than int/float
>>> matrix = [[1, 2, 3], [4, "Hi", 6]]      
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

---
#case.4 what if the rows of the matrix are not the same size
>>> matrix = [[1, 2, 3], [4, 5, 6, 9]]  
>>> print(matrix_divided(matrix, 3))     
Traceback (most recent call last):
    ...     
TypeError: Each row of the matrix must have the same size

---
#case.5 what if the number we divide with (div) equals to 0
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 0)) 
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

---
#case.6 what if we want to print the original matrix
>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]
